var code;

const QueryString = window.location.search;
const urlParams = new URLSearchParams(QueryString);

if (urlParams.has('code')) {
    code = urlParams.get('code');
}

Genesys('registerPlugin', 'AuthProvider', (AuthProvider) => {

    // COMMAND
    // *********
    // getAuthCode
    // reAuthenticate

    /* Register Command - mandatory */

    AuthProvider.registerCommand('getAuthCode', (e) => {

        // Add the necessary logic and resolve with the authCode and redirectUri provided by your Authentication provider. Messenger will call this command to get the the tokens.
        if(code)
        {
            e.resolve({
                authCode: code,			// pass your authorization code here
                redirectUri: "https://gairways.demo.genesys.com/callback.html",	// pass the redirection URI configured in your Authentication provider here
                codeVerifier: localStorage.verifier
            });
        }
    });

    AuthProvider.registerCommand('reAuthenticate', (e) => {

        // Messenger will call this command when current refreshToken and/or authCode are no more valid. Brand can add logic here to simply re-login and resolve this command after successful login so that Messenger can get the new authCode. (In case when browser needs to reload for a login, there is no need to resolve this command). Note: After a successful re-login, calling the getAuthCode command is taken care internally and there is no need to call it explicitly again.
        console.log("Auth token expired for Web Messaging....reAuthenticating")
        e.resolve();
    });

    /* Subscribe to Auth plugin events */

    AuthProvider.subscribe('Auth.authenticating', (jwt) => {
        // This event is published across the browser tabs/devices where the user is logged in, so you can do something on logout.
        // For example, clear any authenticated flags that you might have set during login.

        console.log("Authenticating");
    });


    AuthProvider.subscribe('Auth.authenticated', (jwt) => {
        // This event is published across the browser tabs/devices where the user is logged in, so you can do something on logout.
        // For example, clear any authenticated flags that you might have set during login.

        //This message looks to be published even on re-authenticated/refreshes so doing logic to not redirect if webMessageAuth flag is already true
        if(localStorage.webMessageAuth == 'false' | !localStorage.webMessageAuth)
        {
            console.log("New Authentication Session");
            localStorage.webMessageAuth = 'true';
            window.location = "https://gairways.demo.genesys.com/index.html";
        }
        else
        {
            console.log("Successfully Re-authenticated session");
        }
    });


    AuthProvider.subscribe('Auth.loggedOut', () => {
        console.log("Logging out of Web Messaging")

        //Log out of Azure B2C
        signOutAzureB2C();

        // This event is published across the browser tabs/devices where the user is logged in, so you can do something on logout.
        // For example, clear any authenticated flags that you might have set during login.
    });

    /* Subscribe to Auth plugin events - optional */

    AuthProvider.subscribe('Auth.authError', (error) => {
        console.log("Auth error has occurred!");
        console.log(error);

        // This event is published across the browser tabs/devices where the user is logged in, so you can do something on logout.
        // For example, clear any authenticated flags that you might have set during login.
    });

    AuthProvider.subscribe('Auth.logoutError', (error) => {
        console.log("Auth logout error has occurred...most likely an expired Refresh token. Logging out of AzureB2C.");
        console.log(error);

         //Log out of Azure B2C
         signOutAzureB2C();

        // This event is published across the browser tabs/devices where the user is logged in, so you can do something on logout.
        // For example, clear any authenticated flags that you might have set during login.
    });

    /* Click Handlers */

    // Handle logout        
    /*document.getElementById('logout').onclick = function () {
    
        AuthProvider.command('Auth.logout').then(() => {
            console.log("Logged out of web auth");
        });
    };*/

    // Tell Messenger that your plugin is ready (mandatory)
    AuthProvider.ready();
});
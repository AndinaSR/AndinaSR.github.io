// Create the main myMSALObj instance
// configuration parameters are located at authConfig.js
const myMSALObj = new msal.PublicClientApplication(msalConfig);

var authenticatedMessagingConfig = {
    authority: 'https://genesysgdemo.b2clogin.com/genesysgdemo.onmicrosoft.com/B2C_1A_GTS_OPENID_SIGNUP_SIGNIN',
    client_id: 'b5cf60ae-4431-47ea-85c8-add463000fb1',
    redirect_uri: 'https://gairways.demo.genesys.com/callback.html',
    response_type: 'code',
    scope: 'openid%20offline_access%20https://genesysgdemo.onmicrosoft.com/gairways-webauth/auth-read'
};

let accountId = "";
let username = "";
let accessToken = null;

myMSALObj.handleRedirectPromise()
    .then(response => {
        if (response) {
            /**
             * For the purpose of setting an active account for UI update, we want to consider only the auth response resulting
             * from SUSI flow. "tfp" claim in the id token tells us the policy (NOTE: legacy policies may use "acr" instead of "tfp").
             * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview
             */
            if (response.idTokenClaims['tfp'].toUpperCase() === b2cPolicies.names.signUpSignIn.toUpperCase()) {
                handleResponse(response);
            }
        }
    })
    .catch(error => {
        console.log(error);
    });


function setAccount(account) {
    accountId = account.homeAccountId;
    username = account.username;
    loggedIn(username);
}

function loggedIn(username) {
    /*$('#loginsso').addClass('d-none');
    $('#notLoggedIn').addClass('d-none');
    $('#loggedIn').removeClass('d-none'); 
    $('#pageBody').removeClass('d-none');
    $('#welcomeText').text();*/

    //getTokenRedirect(tokenRequest);

    getCustomer(username).then((output_configuration) => {
        $('#loginsso').addClass('d-none');
        //$('#notLoggedIn').addClass('d-none');
        $('#loggedIn').removeClass('d-none');
        //$('#pageBody').removeClass('d-none');
        $('#welcomeText').text();
        analyticsEvent(window.location.href, localStorage.email, username, username, localStorage.userType);

        //Authenticated Web Messaging
        if (localStorage.webMessageAuth == 'false' | !localStorage.webMessageAuth) {
            var webMessagingSSO = authenticatedMessagingConfig.authority + "/oauth2/v2.0/authorize?client_id=" + authenticatedMessagingConfig.client_id + "&redirect_uri=" + authenticatedMessagingConfig.redirect_uri + "&response_type=" + authenticatedMessagingConfig.response_type + "&scope=" + authenticatedMessagingConfig.scope + "&code_challenge=" + challenge  + "&code_challenge_method=S256"
            window.location = webMessagingSSO;
        }
    })
        .catch((err) => {
            $('#loginsso').addClass('d-none');
            //$('#notLoggedIn').addClass('d-none');
            $('#loggedIn').removeClass('d-none');
            //$('#pageBody').removeClass('d-none');
            $('#welcomeText').text();
        })
}

function loggedOut() {

}

function selectAccount() {

    /**
     * See here for more information on account retrieval: 
     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/Accounts.md
     */

    const currentAccounts = myMSALObj.getAllAccounts();

    if (currentAccounts.length < 1) {
        return;
    } else if (currentAccounts.length > 1) {

        /**
         * Due to the way MSAL caches account objects, the auth response from initiating a user-flow
         * is cached as a new account, which results in more than one account in the cache. Here we make
         * sure we are selecting the account with homeAccountId that contains the sign-up/sign-in user-flow, 
         * as this is the default flow the user initially signed-in with.
         */
        const accounts = currentAccounts.filter(account =>
            account.homeAccountId.toUpperCase().includes(b2cPolicies.names.signUpSignIn.toUpperCase())
            &&
            account.idTokenClaims.iss.toUpperCase().includes(b2cPolicies.authorityDomain.toUpperCase())
            &&
            account.idTokenClaims.aud === msalConfig.auth.clientId
        );

        if (accounts.length > 1) {
            // localAccountId identifies the entity for which the token asserts information.
            if (accounts.every(account => account.localAccountId === accounts[0].localAccountId)) {
                // All accounts belong to the same user
                setAccount(accounts[0]);
            } else {
                // Multiple users detected. Logout all to be safe.
                signOut();
            };
        } else if (accounts.length === 1) {
            setAccount(accounts[0]);
        }

    } else if (currentAccounts.length === 1) {
        setAccount(currentAccounts[0]);
    }
}

// in case of page refresh
selectAccount();

async function handleResponse(response) {

    /**
     * To see the full list of response object properties, visit:
     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md#response
     */

    if (response !== null) {
        setAccount(response.account);
    } else {
        selectAccount();
    }
}

function signIn() {

    /**
     * You can pass a custom request object below. This will override the initial configuration. For more information, visit:
     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md#request
     */
    
    myMSALObj.loginRedirect(loginRequest);
}

function signOut() {
 
    //Delete localstorage entries
    localStorage.removeItem("membershipSkill");
    localStorage.removeItem("lastNameSkill");
    localStorage.removeItem("email");
    localStorage.removeItem("phoneNumber");
    localStorage.removeItem("fakeUser");
    localStorage.removeItem("firstName");
    localStorage.removeItem("lastName");
    localStorage.removeItem("userAddress");
    localStorage.removeItem("userCity");
    localStorage.removeItem("userState");
    localStorage.removeItem("userPostal");
    localStorage.removeItem("userFlightTime");
    localStorage.removeItem("toDestination");
    localStorage.removeItem("fromDestination");
    localStorage.removeItem("userFlightDate");
    localStorage.removeItem("totalPrice");
    localStorage.removeItem("userFlightCost");
    localStorage.removeItem("FlightBooked");
    localStorage.removeItem("adultPassengers");
    localStorage.removeItem("tripInfromation");
    localStorage.removeItem("childrenPassengers");
    localStorage.removeItem("webMessageAuth");
    localStorage.removeItem("userType");
    localStorage.removeItem("verifier");
    localStorage.removeItem("vCode");
    
    //Log out of web messaging
    Genesys("command", "Auth.logout");   
}

function signOutAzureB2C() {
    
    /**
     * You can pass a custom request object below. This will override the initial configuration. For more information, visit:
     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md#request
     */

    const logoutRequest = {
        postLogoutRedirectUri: msalConfig.auth.redirectUri,
    };

    myMSALObj.logoutRedirect(logoutRequest);
}

function getTokenRedirect(request) {

    /**
    * See here for more info on account retrieval: 
    * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/Accounts.md
    */
    request.account = myMSALObj.getAccountByHomeId(accountId);

    /**
     * 
     */
    return myMSALObj.acquireTokenSilent(request)
        .then((response) => {
            // In case the response from B2C server has an empty accessToken field
            // throw an error to initiate token acquisition
            if (!response.accessToken || response.accessToken === "") {
                throw new msal.InteractionRequiredAuthError;
            } else {
                console.log("access_token acquired at: " + new Date().toString());
                accessToken = response.accessToken;
            }
        }).catch(error => {
            console.log("Silent token acquisition fails. Acquiring token using popup. \n", error);
            if (error instanceof msal.InteractionRequiredAuthError) {
                // fallback to interaction when silent call fails
                return myMSALObj.acquireTokenRedirect(request);
            } else {
                console.log(error);
            }
        });
}

function getCustomer(userEmail) {
    return new Promise(function (fulfill, reject) {
        $.ajax({
            type: 'GET',
            url: "https://api.demo.genesys.com/dbsvc/api/v1/envs/gdemo/customer?email=" + userEmail,
            contentType: 'application/json; charset=utf-8',
            dataType: 'JSON',
            success: function (response) {
                if (response == '{}' || response.firstname == '') {
                    alert('Please vist https://demo.genesyslab.com/gdemo/forms/purecloud/customer.jsp to set up your customer. You must do this' +
                        + 'before using GAirways. You must also set the work e-mail addresses to be a valid working address as this will also need to match your salesforce contact email address.');
                    return;
                }
                localStorage.membershipSkill = response.pc_skill2;
                localStorage.lastNameSkill = response.pc_skill1;
                localStorage.email = response.email;
                localStorage.phoneNumber = response.accountID;
                localStorage.fakeUser = response.firstname + " " + response.lastname;
                localStorage.firstName = response.firstname;
                localStorage.lastName = response.lastname;
                localStorage.userAddress = response.address;
                localStorage.userCity = response.city;
                localStorage.userState = response.state;
                localStorage.userPostal = response.zipcode;
                var customer = {
                    customer:
                    {
                        'c_first_name': response.firstname,
                        'c_last_name': response.lastname,
                        'c_email': response.email,
                        'c_phone': response.accountID
                    }
                };
                $('#listFirstName').val(localStorage.firstName);
                $('#listLastName').val(localStorage.lastName);
                $('#emailListField').val(localStorage.email);

                if(response.user_type == 2){
                    localStorage.userType = "Internal";
                }
                else{
                    localStorage.userType = "Partner";
                }
                fulfill(customer);

            },
            error: function (xhr, textStatus, errorThrown) {
                console.log(xhr.responseText);
                reject();
            }
        });
    })
}

function renewIDToken() {
    
    const tempAccount = myMSALObj.getAccountByHomeId(accountId); 

    const renewIdTokenRequest = {
        scopes: [...apiConfig.b2cScopes],
        account: tempAccount
    };
    
    myMSALObj.acquireTokenSilent(renewIdTokenRequest).then((response) => {
        console.log("ID Token Renewed");
        
        //Tell Authenticated Web Messaging to also refresh its token
        
    }).catch(error => {
        console.log("Silent token acquisition fails. Acquiring token using popup. \n", error);
        if (error instanceof msal.InteractionRequiredAuthError) {
            // fallback to interaction when silent call fails
            //console.log("Silent Token Failed....performing Token Redirect");
            //return myMSALObj.acquireTokenRedirect(renewIdTokenRequest);
            console.log("Silent Token Failed....Logging user out");
            signOut();
        } else {
            console.log(error);   
        }
    });
}

//Code Verifier
function generateCodeVerifier(length) {
    let text = '';
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
    for (let i = 0; i < length; i++) {
       text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
   
   return text;
}
   
//Code challenge
function generateCodeChallenge(codeVerifier) {
    return base64URL(CryptoJS.SHA256(codeVerifier)); // eslint-disable-line
}
function base64URL(data) {
    return data.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_'); // eslint-disable-line
}

verifier = generateCodeVerifier(128); //Generate code verifier for PKCE support in OAuth
const challenge = generateCodeChallenge(verifier); // eslint-disable-line //Generate code challenge for PKCE support in OAuth
localStorage.vCode = challenge;
localStorage.verifier = base64URL(verifier);